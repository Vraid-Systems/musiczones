
<project name="MusicZones" default="jar-dist" basedir=".">
    <description>
        ant buildfile for the java MusicZones software
    </description>

    <!-- for javadoc -->
    <property name="component.title" value="MusicZones" />
    <property name="component.version" value="2.1" />

    <!-- directories and files -->
	<property name="assets.dir" location="assets" />
    <property name="libs.dir" location="libs" />
    <property name="src.dir" location="src" />
    <property name="jar.src.dir" location="jar-src" />
    <property name="test.dir" location="test" />
    <property name="jar.src.build.dir" location="jar-build-src" />
    <property name="jar.test.build.dir" location="jar-build-test" />
    <property name="docs.dir" location="docs" />
    <property name="dist.file" location="mz.jar" />
    <property name="junit.filename" value="junit-4.10.jar" />

    <!-- new forked jvm settings -->
    <property name="init.mem.size" value="128m" />
    <property name="max.mem.size" value="256m" />

    <!-- javac properties -->
    <property name="javac.debug" value="true" />
    <property name="javac.fork" value="true" />
    <property name="javac.optimize" value="true" />


    <!-- javadoc is independent of build process -->
    <target name="javadoc">
        <!-- create path ref for multiple source files -->
        <path id="javadoc.pathref">
            <pathelement path="${src.dir}/" />
            <pathelement path="${android.src.dir}/" />
            <pathelement path="${jar.src.dir}" />
        </path>

        <!-- keep docs fresh -->
        <delete dir="${docs.dir}" />
        <mkdir dir="${docs.dir}" />

        <!-- build the component docs, ${component.*} is predefined -->
        <javadoc author="true" bottom="${component.title}" destdir="${docs.dir}"
        doctitle="${component.title}" packagenames="*" access="protected"
        sourcepathref="javadoc.pathref" version="true"
        windowtitle="${component.title} (Version ${component.version})">
        </javadoc>
    </target>


    <!-- clean process independent of platform -->
    <target name="clean-all" description="clean up all generated content">
        <delete dir="${jar.src.build.dir}" />
        <delete dir="${jar.test.build.dir}" />
        <delete dir="${docs.dir}" />
        <delete file="${dist.file}" />
    </target>


    <!-- target for setup to build jar -->
    <target name="jar-init">
        <property name="src.mainclass" value="musiczones.MusicZones" />
        <!-- add the contrib jars to the "jars.classpath" classpath -->
        <path id="jars.classpath">
            <fileset dir="${libs.dir}" includes="**/*.jar" />
        </path>

        <!-- junit classpath: include junit and built classes -->
        <path id="junit.classpath">
            <pathelement location="contrib/${junit.filename}" />
            <pathelement location="${jar.test.build.dir}" />
        </path>

        <!-- created the needed class output directory -->
        <mkdir dir="${jar.src.build.dir}" />
    </target>

    <target name="jar-compile-source" depends="jar-init">
        <javac fork="${javac.fork}" srcdir="${src.dir}:${jar.src.dir}"
        destdir="${jar.src.build.dir}" debug="${javac.debug}"
        memoryinitialsize="${init.mem.size}"
        memorymaximumsize="${max.mem.size}"
        optimize="${javac.optimize}" classpathref="jars.classpath">
            <compilerarg value="-Xlint" />
        </javac>
    </target>

    <target name="jar-compile-tests" depends="jar-compile-source">
        <!-- keep the tests fresh -->
        <delete dir="${jar.test.build.dir}" />
        <mkdir dir="${jar.test.build.dir}" />

        <!-- need the compiled original classes for our tests to compile/run -->
        <copy todir="${jar.test.build.dir}">
            <fileset dir="${jar.src.build.dir}" />
        </copy>

        <!-- create the tests anew -->
        <javac fork="${javac.fork}" srcdir="${test.dir}"
        destdir="${jar.test.build.dir}" debug="${javac.debug}"
        memoryinitialsize="${init.mem.size}"
        memorymaximumsize="${max.mem.size}"
        optimize="${javac.optimize}" classpathref="junit.classpath">
            <compilerarg value="-Xlint" />
        </javac>
    </target>

    <target name="jar-junit" depends="jar-compile-tests">
        <junit fork="true" printsummary="true" showoutput="true"
        maxmemory="${max.mem.size}">
            <classpath>
                <path refid="junit.classpath" />
                <path refid="jars.classpath" />
            </classpath>
            <formatter type="plain" usefile="false" />
            <batchtest>
                <fileset dir="${test.dir}">
                    <include name="**/*Test*.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="jar-dist" depends="jar-compile-source">
        <!-- copy static files into build dir for dist packaging -->
        <mkdir dir="${jar.src.build.dir}/webapp" />
        <copy todir="${jar.src.build.dir}/webapp">
            <fileset dir="${assets.dir}/webapp" />
        </copy>

        <!-- put everything in ${jar.src.build.dir} into the ${dist.file} file -->
        <jar jarfile="${dist.file}" basedir="${jar.src.build.dir}">
            <!-- create application entry point -->
            <manifest>
                <attribute name="Main-Class" value="${src.mainclass}" />
            </manifest>
            <!-- add in library jars otherwise classpath will be lacking -->
            <zipgroupfileset dir="${libs.dir}" includes="**/*.jar" excludes="**/${junit.filename}" />
        </jar>
    </target>

    <target name="jar-run" depends="jar-dist">
        <java jar="${dist.file}" fork="true" />
    </target>
</project>
